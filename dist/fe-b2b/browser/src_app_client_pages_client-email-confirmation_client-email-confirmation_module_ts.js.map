{"version":3,"file":"src_app_client_pages_client-email-confirmation_client-email-confirmation_module_ts.js","mappings":";;;;;;;;;;;;;;;;AACuD;AACyC;;;AAEhG,MAAM,MAAM,GAAW;IACtB;QACC,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,yGAAgC;KAC3C;CACD,CAAC;AAMK,MAAM,oCAAoC;;wHAApC,oCAAoC;iIAApC,oCAAoC;qIAHtC,kEAAqB,CAAC,MAAM,CAAC,EAC7B,yDAAY;mIAEV,oCAAoC,oFAFtC,yDAAY;;;;;;;;;;;;;;;;;;;;;ACZwB;AAEU;AACyC;AACF;AAC5C;;AAM7C,MAAM,6BAA6B;;0GAA7B,6BAA6B;0HAA7B,6BAA6B;8HAF/B,yDAAY,EAAE,2GAAoC,EAAE,mEAAoB,EAAE,gEAAe;mIAEvF,6BAA6B,mBAH1B,yGAAgC,aACrC,yDAAY,EAAE,2GAAoC,EAAE,mEAAoB,EAAE,gEAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR/B;AACT;AAElC;;;;;;;;;;ICJzB,uEAAqE;IACpE,uDACD;;IAAA,4DAAI;;IADH,0DACD;IADC,mLACD;;IDaY,gCAAgC,SAAhC,gCAAgC;IAG5C,YACkB,eAA+B,EAC/B,OAAe,EACf,WAAuB,EACxB,iBAAoC,EACjC,eAAgC,EAClC,eAAgC;QALhC,oBAAe,GAAf,eAAe,CAAgB;QAC/B,YAAO,GAAP,OAAO,CAAQ;QACf,gBAAW,GAAX,WAAW,CAAY;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACjC,oBAAe,GAAf,eAAe,CAAiB;QAClC,oBAAe,GAAf,eAAe,CAAiB;IAC/C,CAAC;IAEJ,QAAQ;IACR,CAAC;IAED,eAAe;QACd,IAAI,CAAC,eAAe,CAAC,MAAM;aACzB,IAAI,CACJ,qEAAc,CAAC,IAAI,CAAC,EACpB,yDAAS,CAAC,CAAC,EAAO,EAAE,EAAE;YACrB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,EACF,0DAAU,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,OAAO,wCAAE,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC,CACD,CAAC;aACD,SAAS,CAAC,GAAG,EAAE;YACf,4FAA4F;YAC5F,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;gBACnC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC;aAC3F;QACF,CAAC,CAAC;QACF,sBAAsB;QACtB,+FAA+F;QAC/F,MAAM;IAER,CAAC;CACD;gHAtCY,gCAAgC;8HAAhC,gCAAgC;QChB7C,yEAAgC;QAC/B,wHAEI;QACL,4DAAM;;QAHsC,0DAAwB;QAAxB,wFAAwB;;ADevD,gCAAgC;IAN5C,mEAAY,EAAE;GAMF,gCAAgC,CAsC5C;AAtC4C","sources":["./src/app/client/pages/client-email-confirmation/client-email-confirmation-routing.module.ts","./src/app/client/pages/client-email-confirmation/client-email-confirmation.module.ts","./src/app/client/pages/client-email-confirmation/layout/client-email-confirmation.component.ts","./src/app/client/pages/client-email-confirmation/layout/client-email-confirmation.component.html"],"sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { ClientEmailConfirmationComponent } from \"./layout/client-email-confirmation.component\";\n\nconst routes: Routes = [\n\t{\n\t\tpath: \":id\",\n\t\tcomponent: ClientEmailConfirmationComponent,\n\t},\n];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule],\n})\nexport class ClientEmailConfirmationRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { B2bNgxSkeletonModule } from \"@b2b/ngx-skeleton\";\nimport { ClientEmailConfirmationRoutingModule } from \"./client-email-confirmation-routing.module\";\nimport { ClientEmailConfirmationComponent } from \"./layout/client-email-confirmation.component\";\nimport {TranslateModule} from \"@ngx-translate/core\";\n\n@NgModule({\n\tdeclarations: [ClientEmailConfirmationComponent],\n\timports: [CommonModule, ClientEmailConfirmationRoutingModule, B2bNgxSkeletonModule, TranslateModule],\n})\nexport class ClientEmailConfirmationModule {}\n","import {AfterViewInit, ChangeDetectionStrategy, Component, OnInit} from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { UntilDestroy, untilDestroyed } from \"@ngneat/until-destroy\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport { ApiService } from \"../../../../core/services/api/api.service\";\nimport { of } from \"rxjs\";\nimport { B2bNgxLinkService } from \"@b2b/ngx-link\";\nimport {MixpanelService} from \"../../../../core/services/mixpanel/mixpanel.service\";\nimport {PlatformService} from \"../../../services/platform/platform.service\";\n\n@UntilDestroy()\n@Component({\n\tselector: \"b2b-client-email-confirmation\",\n\ttemplateUrl: \"./client-email-confirmation.component.html\",\n\tstyleUrls: [\"./client-email-confirmation.component.scss\"],\n})\nexport class ClientEmailConfirmationComponent implements AfterViewInit {\n\tisAccountActivated: boolean;\n\n\tconstructor(\n\t\tprivate readonly _activatedRoute: ActivatedRoute,\n\t\tprivate readonly _router: Router,\n\t\tprivate readonly _apiService: ApiService,\n\t\tpublic readonly b2bNgxLinkService: B2bNgxLinkService,\n    private readonly mixpanelService: MixpanelService,\n\t\tprivate readonly platformService: PlatformService\n\t) {}\n\n\tngOnInit() {\n\t}\n\n\tngAfterViewInit() {\n\t\tthis._activatedRoute.params\n\t\t\t.pipe(\n\t\t\t\tuntilDestroyed(this),\n\t\t\t\tswitchMap((id: any) => {\n\t\t\t\t\treturn this._apiService.get(`email/verify/${id.id}`);\n\t\t\t\t}),\n\t\t\t\tcatchError(() => {\n\t\t\t\t\tthis.isAccountActivated = true;\n\t\t\t\t\treturn of(null);\n\t\t\t\t}\n\t\t\t))\n\t\t\t.subscribe(() => {\n\t\t\t\t// this._router.navigateByUrl(this.b2bNgxLinkService.getStaticLink(`/registration-complete`)\n\t\t\t\tif (this.platformService.isBrowser) {\n\t\t\t\t\tthis._router.navigateByUrl(this.b2bNgxLinkService.getStaticLink(`/registration-complete`));\n\t\t\t\t}\n\t\t\t})\n\t\t\t// .subscribe( () => {\n\t\t\t// \tthis._router.navigateByUrl(this.b2bNgxLinkService.getStaticLink(`/registration-complete`));\n\t\t\t// });\n\n\t}\n}\n","<div class=\"email-confirmation\">\n\t<p class=\"email-confirmation__body-title\" *ngIf=\"isAccountActivated\">\n\t\t{{ \"EMAIL_CONFIRMATION.ACCOUNT_ACTIVATED\" | translate }}\n\t</p>\n</div>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}